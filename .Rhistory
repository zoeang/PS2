Stattable<-as.table(Parti(c(1:100), FALSE, TRUE))
a<-c(548,265489,16514,651,864,31,54,231,648,23)
b<-NULL
xi<-NULL
leemis<-function(a){
#argument a will be a vector of total votes
b<-as.numeric(substr(a, start=1, stop=1)) #This will take the first signficant digit of each element of the fed vector
proportions<-NULL
for (i in 1:9){ #This loop creates x_i, a proportion of occurrence of each significant digit
y<-sum(b==i)/length(a)
proportions<-c(proportions,y)
}
xi<-proportions
argument<-NULL
for(i in 1:9){ #This loop calculates the inside of the max function for Leemis m
element<-(xi[i]-log((1+1/i), base=10))
argument<-c(argument,element)
}
argmax<-max(argument) #This is m
return(argmax)
}
ChoGains<-function(a){
b<-as.numeric(substr(a, start=1, stop=1)) #This will take the first signficant digit of each element of the fed vector
proportions<-NULL
for (i in 1:9){ #This loop creates x_i, a proportion of occurrence of each significant digit
y<-sum(b==i)/length(a)
proportions<-c(proportions,y)
}
xi<-proportions
elemsum<-NULL
for (i in 1:9){ #This loop will calculate ChoGains' d
element<-((xi[i]-log((1+1/i), base=10))^2)
elemsum<-c(elemsum,element)
elemsumvec<-sum(elemsum)
d<-sqrt(elemsumvec)
}
return(d)
}
Parti<-function(a,m,d){
#a is the vector
#if m is true, Leemis m will be calculated; if false, it won't
#if d is true, Cho Gains will be calculated; if false, it won't
#argument a will be a vector of total votes
b<-as.numeric(substr(a, start=1, stop=1)) #This will take the first signficant digit of each element of the fed vector
proportions<-NULL
for(i in 1:9){ #This loop creates x_i, a proportion of occurrence of each significant digit
y<-sum(b==i)/length(a)
proportions<-c(proportions,y)
}
xi<-proportions
#Leemis
if(m==T){
argument<-NULL
for(i in 1:9){ #This loop calculates the inside of the max function for Leemis m
element<-(xi[i]-log((1+1/i), base=10))
argument<-c(argument,element)
}
output1<-max(argument) #This is m
} else{
output1<-NA
}
#Cho Gain's
if(d==T){
elemsum<-NULL
for (i in 1:9){ #This loop will calculate ChoGains' d
element<-((xi[i]-log((1+1/i), base=10))^2)
elemsum<-c(elemsum,element)
elemsumvec<-sum(elemsum)
d<-sqrt(elemsumvec)
}
output2<-d
} else{
output2<-NA
}
#distribution
digitdistribution<-table(xi)
#Final Output
output <- list(output1, output2, digitdistribution)
names(output)<-c("Leemis' m", "Cho-Gains' d", "Digit Distribution")
return(output)
}
Stattable<-as.table(Parti(c(1:100), FALSE, TRUE))
Parti(c(1:100), FALSE, TRUE)
Stattable<-as.data.frame(Parti(c(1:100), FALSE, TRUE))
Stattable<-as.data.frame(Parti(c(1:100), FALSE, TRUE),
row.names = c("Leemis' m", "Cho-Gains' d"),
col.names = c("alpha=.10", "alpha=.05", "alpha=.01"))
Stattable
Parti(c(1:100), FALSE, TRUE)[1]
Parti(c(1:100), FALSE, TRUE)
rm(Stattable)
Parti(c(1:100), FALSE, TRUE)
Parti(c(1:100), FALSE, TRUE)[1]
Parti(c(1:100), FALSE, TRUE)[2]
Parti(c(1:100), FALSE, TRUE)[[2]]
Stattable<-matrix(c(Parti(a,m,d)[[1]], Parti(a,m,d)[[2]]))
Stattable<-matrix(c(Parti(c(1:100), FALSE, TRUE)[[1]],
Parti(c(1:100), FALSE, TRUE)[[2]]),
byrow = T)
row.names(Stattable)<-c("Leemis' m", "Cho-Gains' d")
col.names(Stattable)<-c("Result")
Stattable
col.names(Stattable)<-c("Result")
colnames(Stattable)<-c("Result")
Stattable
L<-Parti(c(1:100), FALSE, TRUE)[[1]]
D<-Parti(c(1:100), FALSE, TRUE)[[2]]
Stattable<-matrix(c(L,D),byrow = T)
row.names(Stattable)<-c("Leemis' m", "Cho-Gains' d")
colnames(Stattable)<-c("Result")
Stattable
L<-Parti(c(1:100), TRUE, TRUE)[[1]]
D<-Parti(c(1:100), T, TRUE)[[2]]
L<=.851
L>=.851
L1=NULL
L1<-c(L, "*")
L1
L1<-c(round(L,3), "*")
L1
L1<-paste(round(L,3),"*", sep="")
L1
L<.967
L>=.851
L>=.851 & L<.967
L1=NULL
print(L)
print(round(L,3)
}
Stattable<-matrix(c(L,D),byrow = T)
row.names(Stattable)<-c("Leemis' m", "Cho-Gains' d")
colnames(Stattable)<-c("Result")
Stattable
print(round(L,3)
}
Stattable<-matrix(c(L,D),byrow = T)
row.names(Stattable)<-c("Leemis' m", "Cho-Gains' d")
colnames(Stattable)<-c("Result")
Stattable
print(round(L,3))
L1=NULL
if(L>=.851 & L<.967){
L1<-paste(round(L,3),"*", sep="")
} else if (L>=.967 & L<1.212){
L1<-paste(round(L,3),"**", sep="")
} else if (L>=1.212){
L1<-paste(round(L,3),"***", sep="")
} else {
print(round(L,3))
}
Stattable<-matrix(c(L,D),byrow = T)
row.names(Stattable)<-c("Leemis' m", "Cho-Gains' d")
colnames(Stattable)<-c("Result")
Stattable
L<-Parti(a, TRUE, TRUE)[[1]]
L<-Parti(c(10:19), TRUE, TRUE)[[1]]
LM<-(if(L>=.851 & L<.967){
L1<-paste(round(L,3),"*", sep="")
} else if (L>=.967 & L<1.212){
L1<-paste(round(L,3),"**", sep="")
} else if (L>=1.212){
L1<-paste(round(L,3),"***", sep="")
} else {
print(round(L,3))
})
a<-c(10:19)
length(a)
b<-as.numeric(substr(a, start=1, stop=1)) #This will take the first signficant digit of each element of the fed vector
y<-sum(b==i)/length(a)
y<-sum(b==1)/length(a)
y<-sum(b==2)/length(a)
b==1
D1=NULL
CGD<-(if(D>=1.212 & D<1.330){
D1<-paste(round(D,3),"*", sep="")
} else if (D>=1.330 & L<1.569){
D1<-paste(round(L,3),"**", sep="")
} else if (D>=1.569){
D1<-paste(round(D,3),"***", sep="")
} else {
print(round(D,3))
})
L<-Parti(c(10:19), TRUE, TRUE)[[1]]
D<-Parti(c(1:100), T, TRUE)[[2]]
L<-Parti(c(10:13), TRUE, TRUE)[[1]]
L<-Parti(c(10:15), TRUE, TRUE)[[1]]
a<-c(10:13)
Parti<-function(a,m,d){
#a is the vector
#if m is true, Leemis m will be calculated; if false, it won't
#if d is true, Cho Gains will be calculated; if false, it won't
#argument a will be a vector of total votes
b<-as.numeric(substr(a, start=1, stop=1)) #This will take the first signficant digit of each element of the fed vector
proportions<-NULL
for(i in 1:9){ #This loop creates x_i, a proportion of occurrence of each significant digit
y<-sum(b==i)/length(a)
proportions<-c(proportions,y)
}
xi<-proportions
#Leemis
if(m==T){
argument<-NULL
for(i in 1:9){ #This loop calculates the inside of the max function for Leemis m
element<-(xi[i]-log((1+1/i), base=10))
argument<-c(argument,element)
}
output1<-max(argument) #This is m
} else{
output1<-NA
}
#Cho Gain's
if(d==T){
elemsum<-NULL
for (i in 1:9){ #This loop will calculate ChoGains' d
element<-((xi[i]-log((1+1/i), base=10))^2)
elemsum<-c(elemsum,element)
elemsumvec<-sum(elemsum)
d<-sqrt(elemsumvec)
}
output2<-d
} else{
output2<-NA
}
#distribution
digitdistribution<-table(xi)
#Final Output
output <- list(output1, output2, digitdistribution)
names(output)<-c("Leemis' m", "Cho-Gains' d", "Digit Distribution")
return(output)
}
L<-Parti(c(10:15), TRUE, TRUE)[[1]]
L<-Parti(a, TRUE, TRUE)[[1]]
L<-Parti(c(1:100), TRUE, TRUE)[[1]]
Stattable<-matrix(c(LM,CGD),byrow = T)
Stattable
row.names(Stattable)<-c("Leemis' m", "Cho-Gains' d")
colnames(Stattable)<-c("Result")
Stattable
astriks<-c("*=p(.10)","**=p(.05)", "***=p(.01)")
c(Stattable, astriks)
list(Stattable, astriks)
paste(Stattable, astriks)
plot(Stattable)
Stattable
Stattable<-matrix(c(LM,CGD, astriks),byrow = T)
row.names(Stattable)<-c("Leemis' m", "Cho-Gains' d")
colnames(Stattable)<-c("Result")
Stattable
astriks<-"*=p(.10) **=p(.05) ***=p(.01)"
Stattable<-matrix(c(LM,CGD, astriks),byrow = T)
Stattable
